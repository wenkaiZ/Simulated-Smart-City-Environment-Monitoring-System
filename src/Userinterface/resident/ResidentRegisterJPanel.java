/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Userinterface.resident;

import Business.DataBase.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Role.MayorRole;
import Business.Role.ResidentRole;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author luoyu
 */
public class ResidentRegisterJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdmincreateJPanel1
     */
    JPanel cardSequenceJPanel;
    EcoSystem ecoSystem;
    private DB4OUtil dB4OUtil;
    public ResidentRegisterJPanel(JPanel cardSequenceJPanel, EcoSystem ecoSystem) {
        this.cardSequenceJPanel = cardSequenceJPanel;
        this.ecoSystem = ecoSystem;
        dB4OUtil = DB4OUtil.getInstance();
        initComponents();
        populateCity();
    }
    
    public void populateCity(){
        cityJComboBox.removeAllItems();
        communityJComboBox.removeAllItems();
        
        for(Network n : ecoSystem.getNetworkList()){
            cityJComboBox.addItem(n.getName());
        }
    }
    
    public void populateCommunity(String cityString){
        communityJComboBox.removeAllItems();
        for(Network n : ecoSystem.getNetworkList()){
            if(n.getName().equals(String.valueOf(cityString))){
                for(Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()){
                    if(e.getEnterpriseType() == Enterprise.EnterpriseType.Community){
                        
                        communityJComboBox.addItem(e.getName());
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        healthButtonGroup = new javax.swing.ButtonGroup();
        usernameJLable = new javax.swing.JLabel();
        passwordJLable = new javax.swing.JLabel();
        rePasswordJLabel = new javax.swing.JLabel();
        usernameTxt = new javax.swing.JTextField();
        createBtn = new javax.swing.JButton();
        cityJLable = new javax.swing.JLabel();
        healthJLable = new javax.swing.JLabel();
        healthyJRadioBtn = new javax.swing.JRadioButton();
        unhealthyJRadioBtn = new javax.swing.JRadioButton();
        cancerJCheckBox = new javax.swing.JCheckBox();
        respiratoryJCheckBox = new javax.swing.JCheckBox();
        cityJComboBox = new javax.swing.JComboBox<>();
        communityJComboBox = new javax.swing.JComboBox<>();
        communityJLable = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        reJPasswordField = new javax.swing.JPasswordField();
        otherCheckBox = new javax.swing.JCheckBox();
        otherJTxt = new javax.swing.JTextField();

        setBackground(new java.awt.Color(153, 204, 255));

        usernameJLable.setText("Username:");

        passwordJLable.setText("Password:");

        rePasswordJLabel.setText("Re-enter Password :");

        createBtn.setText("Create");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        cityJLable.setText("City:");

        healthJLable.setText("Health Conditions:");

        healthButtonGroup.add(healthyJRadioBtn);
        healthyJRadioBtn.setText("Healthy");
        healthyJRadioBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                healthyJRadioBtnMouseClicked(evt);
            }
        });

        healthButtonGroup.add(unhealthyJRadioBtn);
        unhealthyJRadioBtn.setText("Unhealthy");
        unhealthyJRadioBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unhealthyJRadioBtnMouseClicked(evt);
            }
        });

        cancerJCheckBox.setText("Cancer");
        cancerJCheckBox.setActionCommand("");
        cancerJCheckBox.setEnabled(false);

        respiratoryJCheckBox.setText("Respiratory Diseases");
        respiratoryJCheckBox.setActionCommand("");
        respiratoryJCheckBox.setEnabled(false);

        cityJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityJComboBoxActionPerformed(evt);
            }
        });

        communityJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        communityJLable.setText("Community:");

        jPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordFieldKeyReleased(evt);
            }
        });

        reJPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                reJPasswordFieldKeyReleased(evt);
            }
        });

        otherCheckBox.setText("Other Diseases:");
        otherCheckBox.setActionCommand("");
        otherCheckBox.setEnabled(false);
        otherCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherCheckBoxActionPerformed(evt);
            }
        });

        otherJTxt.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(rePasswordJLabel)
                                .addComponent(passwordJLable))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                .addComponent(reJPasswordField))
                            .addGap(172, 172, 172))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(communityJLable)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(communityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(cityJLable)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(146, 146, 146)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(healthJLable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unhealthyJRadioBtn)
                            .addComponent(healthyJRadioBtn)
                            .addComponent(cancerJCheckBox)
                            .addComponent(respiratoryJCheckBox)
                            .addComponent(createBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(otherCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(otherJTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(usernameJLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameJLable)
                    .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordJLable)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rePasswordJLabel)
                    .addComponent(reJPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityJLable)
                    .addComponent(cityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(communityJLable)
                    .addComponent(communityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(healthJLable)
                    .addComponent(healthyJRadioBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unhealthyJRadioBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancerJCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(respiratoryJCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(otherCheckBox)
                    .addComponent(otherJTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(createBtn)
                .addGap(59, 59, 59))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jPasswordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordFieldKeyReleased
        // TODO add your handling code here:
        //In order to compare .getPassword(), we shoule use String.valueOf() to convert password into string, toString() doesn't work.
        if(!String.valueOf(reJPasswordField.getPassword()).equals(String.valueOf(jPasswordField.getPassword()))){
            reJPasswordField.setBackground(Color.red);            
        }
        else
            reJPasswordField.setBackground(Color.white);
    }//GEN-LAST:event_jPasswordFieldKeyReleased

    private void reJPasswordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reJPasswordFieldKeyReleased
        // TODO add your handling code here:
        if(!String.valueOf(reJPasswordField.getPassword()).equals(String.valueOf(jPasswordField.getPassword()))){
            reJPasswordField.setBackground(Color.red);
            System.out.println(jPasswordField.getPassword());
        }
        else
            reJPasswordField.setBackground(Color.white);
    }//GEN-LAST:event_reJPasswordFieldKeyReleased

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        // TODO add your handling code here:
        Enterprise communityOfficial = null;
                        String userName = usernameTxt.getText();
                        String password = String.valueOf(jPasswordField.getPassword());
                        String city = cityJComboBox.getSelectedItem().toString();
                        String community = communityJComboBox.getSelectedItem().toString();
                        for(Network n : ecoSystem.getNetworkList()){
                            if(n.getName().equals(city)){
                                for(Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()){
                                    if(e.getEnterpriseType() == Enterprise.EnterpriseType.Community){
                                        communityOfficial = e;
                                    }
                                }
                            }
                        }
                        if(communityOfficial!=null){
        if(communityOfficial.getOrganizationDirectory().getOrganizationList().get(0).getUserAccountDirectory().checkIfUsernameIsUnique(userName)&&!userName.equals("")){
            //check password match
            if(String.valueOf(reJPasswordField.getPassword()).equals(String.valueOf(jPasswordField.getPassword()))&&!password.equals("")){
                //check city&community selection
                if(!cityJComboBox.getSelectedItem().equals("null")&&!communityJComboBox.getSelectedItem().equals("null")){
                    //check health condition selection
                    if(healthyJRadioBtn.isSelected()){
                        UserAccount newAccount = communityOfficial.getOrganizationDirectory().getOrganizationList().get(0).getUserAccountDirectory().createUserAccount(userName, password, new ResidentRole(), community);
                        ((ResidentRole)newAccount.getRole()).setDisease("no");
                        JOptionPane.showMessageDialog(null, "Create account successfully.");
                        CardLayout layout = (CardLayout)cardSequenceJPanel.getLayout();
                        RegisterSuccessfully registerSuccessfully = new RegisterSuccessfully();
                        cardSequenceJPanel.add(registerSuccessfully);
                        layout.next(cardSequenceJPanel);
                    }
                    else if(unhealthyJRadioBtn.isSelected()){
                        if(cancerJCheckBox.isSelected()||respiratoryJCheckBox.isSelected()||otherCheckBox.isSelected()){
                            UserAccount newAccount = communityOfficial.getOrganizationDirectory().getOrganizationList().get(0).getUserAccountDirectory().createUserAccount(userName, password, new ResidentRole(), community);
                            if(cancerJCheckBox.isSelected()){
                                ((ResidentRole)newAccount.getRole()).setDisease("Cancer");
                            }
                            if(respiratoryJCheckBox.isSelected()){
                                ((ResidentRole)newAccount.getRole()).setDisease(((ResidentRole)newAccount.getRole()).getDisease()+",RespiratoryDisease");
                            }
                            if(otherCheckBox.isSelected()){
                                ((ResidentRole)newAccount.getRole()).setDisease(((ResidentRole)newAccount.getRole()).getDisease()+","+otherJTxt.getText());
                            }
                            JOptionPane.showMessageDialog(null, "Create account successfully.");
                            CardLayout layout = (CardLayout)cardSequenceJPanel.getLayout();
                            RegisterSuccessfully registerSuccessfully = new RegisterSuccessfully();
                            cardSequenceJPanel.add(registerSuccessfully);
                            layout.next(cardSequenceJPanel);
                        }
                        else
                            JOptionPane.showMessageDialog(null, "You should select one disease at least.", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                    else
                        JOptionPane.showMessageDialog(null, "You should provide your healthy conditions.", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                else
                    JOptionPane.showMessageDialog(null, "You should select your city&district.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else
                JOptionPane.showMessageDialog(null, "The passwords you entered are not matched.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else
            JOptionPane.showMessageDialog(null, "The username has already existed.", "Warning", JOptionPane.WARNING_MESSAGE);
                        }
                        dB4OUtil.storeSystem(ecoSystem);
    }//GEN-LAST:event_createBtnActionPerformed

    private void unhealthyJRadioBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unhealthyJRadioBtnMouseClicked
        // TODO add your handling code here:
        if(unhealthyJRadioBtn.isSelected()){
            cancerJCheckBox.setEnabled(true);
            respiratoryJCheckBox.setEnabled(true);
            otherCheckBox.setEnabled(true);
        }
    }//GEN-LAST:event_unhealthyJRadioBtnMouseClicked

    private void healthyJRadioBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_healthyJRadioBtnMouseClicked
        // TODO add your handling code here:
        if(healthyJRadioBtn.isSelected()){
            cancerJCheckBox.setEnabled(false);
            respiratoryJCheckBox.setEnabled(false);
            otherCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_healthyJRadioBtnMouseClicked

    private void cityJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityJComboBoxActionPerformed
        // TODO add your handling code here:
        if(cityJComboBox.getSelectedItem()!=null){
            populateCommunity(String.valueOf(cityJComboBox.getSelectedItem()));
        }
    }//GEN-LAST:event_cityJComboBoxActionPerformed

    private void otherCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherCheckBoxActionPerformed
        // TODO add your handling code here:
        if(otherCheckBox.isSelected()){
            otherJTxt.setEnabled(true);
        }
        else
            otherJTxt.setEnabled(false);
    }//GEN-LAST:event_otherCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cancerJCheckBox;
    private javax.swing.JComboBox<String> cityJComboBox;
    private javax.swing.JLabel cityJLable;
    private javax.swing.JComboBox<String> communityJComboBox;
    private javax.swing.JLabel communityJLable;
    private javax.swing.JButton createBtn;
    private javax.swing.ButtonGroup healthButtonGroup;
    private javax.swing.JLabel healthJLable;
    private javax.swing.JRadioButton healthyJRadioBtn;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JCheckBox otherCheckBox;
    private javax.swing.JTextField otherJTxt;
    private javax.swing.JLabel passwordJLable;
    private javax.swing.JPasswordField reJPasswordField;
    private javax.swing.JLabel rePasswordJLabel;
    private javax.swing.JCheckBox respiratoryJCheckBox;
    private javax.swing.JRadioButton unhealthyJRadioBtn;
    private javax.swing.JLabel usernameJLable;
    private javax.swing.JTextField usernameTxt;
    // End of variables declaration//GEN-END:variables
}
