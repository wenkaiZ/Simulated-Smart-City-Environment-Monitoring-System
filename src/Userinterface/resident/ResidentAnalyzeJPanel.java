/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Userinterface.resident;

import Business.EcoSystem;
import Business.MessageNotification.PostMessage;
import Business.MessageNotification.ResidentRelatedMessage;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zhengwenkai
 */
public class ResidentAnalyzeJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ResidentAnalyzeJPanel
     */
    JPanel cardSequenceJPanel;
    EcoSystem ecoSystem;
    Network network;
    UserAccount userAccount;
    public ResidentAnalyzeJPanel(JPanel cardSequenceJPanel, EcoSystem ecoSystem, Network network, UserAccount userAccount) {
        this.cardSequenceJPanel = cardSequenceJPanel;
        this.ecoSystem = ecoSystem;
        this.network = network;
        this.userAccount = userAccount;
        initComponents();
        populateVitalSignTable();
        populateResult();
    }
    
    public void populateVitalSignTable(){
        DefaultTableModel model = (DefaultTableModel) vitalSHJTable.getModel();
        
        model.setRowCount(0);
        for (PostMessage vs : userAccount.getMessageQueue().getMessages()){
            
            Object[] row = new Object[4];
            row[0] = ((ResidentRelatedMessage)vs).getPostDate();
            row[1] = ((ResidentRelatedMessage)vs).getTemperature();
            row[2] = ((ResidentRelatedMessage)vs).getBloodPressure();
            row[3] = ((ResidentRelatedMessage)vs).getPulse();
            
            model.addRow(row);
        }
    }
    
    public void populateResult(){
        double averageTemp = 0, avergeBP = 0, averagePul = 0;
        double tempStandardDevition = 0, bpStandardDevition = 0, pulStandardDevition = 0;
        DefaultTableModel model = (DefaultTableModel) vitalSHJTable.getModel();
        
        int rowCount = model.getRowCount();
        int columnCount = model.getColumnCount();
        double sum = 0;
        for(int column = 1; column < columnCount; column++){
            sum = 0;
            for(int row = 0; row < rowCount; row++){
                sum = sum + Double.parseDouble((String.valueOf(model.getValueAt(row, column))).split(" ")[0]);
            }
            switch(column){
                case 1:
                    averageTemp = sum/rowCount;
                    break;
                case 2:
                    avergeBP = sum/rowCount;
                    break;
                case 3:
                    averagePul = sum/rowCount;
                    break;
            }
        }
        double average = 0;
        for(int column = 1; column < columnCount; column++){
            sum = 0;
            switch(column){
                case 1:
                    average = averageTemp;
                    break;
                case 2:
                    average = avergeBP;
                    break;
                case 3:
                    average = averagePul;
                    break;
            }
            for(int row = 0; row < rowCount; row++){
                sum = sum + Math.pow(Double.parseDouble((String.valueOf(model.getValueAt(row, column))).split(" ")[0])-average,2);
            }
            switch(column){
                case 1:
                    tempStandardDevition = sum/(rowCount-1);
                    break;
                case 2:
                    bpStandardDevition = sum/(rowCount-1);
                    break;
                case 3:
                    pulStandardDevition = sum/(rowCount-1);
                    break;
            }
        }
        
        resultJTextArea.setText("Your Temperature's Average is: " + averageTemp + " degree centigrade"+
                "\nYour Blood Pressure's Average is: " + avergeBP + " mmHg"+
                "\nYour Pulse's Average is: " + averagePul + " times/min"+
                "\nYour Temperature's Standard Devition is: " + tempStandardDevition +
                "\nYour Blood Pressure's Standard Devition is: " + bpStandardDevition +
                "\nYour Pulse's Standard Devition is: " + pulStandardDevition);
        resultJTextArea.setEditable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        vitalSHJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        vitalSHJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultJTextArea = new javax.swing.JTextArea();
        backJBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 204, 255));

        vitalSHJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "Temperature", "Blood Pressure", "Pulse"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(vitalSHJTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Analysis Result");

        vitalSHJLabel.setText("Vital Sign History");

        resultJTextArea.setColumns(20);
        resultJTextArea.setRows(5);
        jScrollPane1.setViewportView(resultJTextArea);

        backJBtn.setText("<<Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vitalSHJLabel)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backJBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                                .addComponent(jScrollPane1)))))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(vitalSHJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backJBtn)
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:
        cardSequenceJPanel.remove(this);
        //refresh table
        Component[] componentArray = cardSequenceJPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ResidentMainJPanel residentMainJPanel = (ResidentMainJPanel) component;
        residentMainJPanel.populateVitalSignTable();

        CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
        layout.previous(cardSequenceJPanel);

    }//GEN-LAST:event_backJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea resultJTextArea;
    private javax.swing.JLabel vitalSHJLabel;
    private javax.swing.JTable vitalSHJTable;
    // End of variables declaration//GEN-END:variables
}
